[
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "get_token",
        "importPath": "django.middleware.csrf",
        "description": "django.middleware.csrf",
        "isExtraImport": true,
        "detail": "django.middleware.csrf",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "apps.users.models",
        "description": "apps.users.models",
        "isExtraImport": true,
        "detail": "apps.users.models",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "UserService",
        "importPath": "apps.users.service.UserService",
        "description": "apps.users.service.UserService",
        "isExtraImport": true,
        "detail": "apps.users.service.UserService",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "apps.users.serializers",
        "description": "apps.users.serializers",
        "isExtraImport": true,
        "detail": "apps.users.serializers",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "Csv",
        "importPath": "decouple",
        "description": "decouple",
        "isExtraImport": true,
        "detail": "decouple",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "BooksConfig",
        "kind": 6,
        "importPath": "apps.books.apps",
        "description": "apps.books.apps",
        "peekOfCode": "class BooksConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.books'",
        "detail": "apps.books.apps",
        "documentation": {}
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "apps.books.models",
        "description": "apps.books.models",
        "peekOfCode": "class Author(models.Model):\n    full_name = models.CharField(max_length=150)\n    def __str__(self):\n        return self.full_name\nclass EnumStatus(models.TextChoices):\n    STATUS_1 = '1', 'Status 1'\n    STATUS_2 = '2', 'Status 2'\n    STATUS_3 = '3', 'Status 3'\n    STATUS_4 = '4', 'Status 4'\n    STATUS_5 = '5', 'Status 5'",
        "detail": "apps.books.models",
        "documentation": {}
    },
    {
        "label": "EnumStatus",
        "kind": 6,
        "importPath": "apps.books.models",
        "description": "apps.books.models",
        "peekOfCode": "class EnumStatus(models.TextChoices):\n    STATUS_1 = '1', 'Status 1'\n    STATUS_2 = '2', 'Status 2'\n    STATUS_3 = '3', 'Status 3'\n    STATUS_4 = '4', 'Status 4'\n    STATUS_5 = '5', 'Status 5'\nclass ConservationStatus(models.Model):\n    status = models.CharField(\n        max_length=1,\n        choices=EnumStatus.choices,",
        "detail": "apps.books.models",
        "documentation": {}
    },
    {
        "label": "ConservationStatus",
        "kind": 6,
        "importPath": "apps.books.models",
        "description": "apps.books.models",
        "peekOfCode": "class ConservationStatus(models.Model):\n    status = models.CharField(\n        max_length=1,\n        choices=EnumStatus.choices,\n        default=EnumStatus.STATUS_5\n    )\n    description_status = models.TextField(blank=True, null=True)\n    def __str__(self):\n        return f\"{self.get_status_display()} - {self.description_status or ''}\"\nclass EnumExchangeDonation(models.TextChoices):",
        "detail": "apps.books.models",
        "documentation": {}
    },
    {
        "label": "EnumExchangeDonation",
        "kind": 6,
        "importPath": "apps.books.models",
        "description": "apps.books.models",
        "peekOfCode": "class EnumExchangeDonation(models.TextChoices):\n    EXCHANGE = '1', 'Exchange'\n    DONATION = '2', 'Donation'\nclass Announces(models.Model):\n    conservation_status = models.ForeignKey(\n        ConservationStatus,\n        on_delete=models.CASCADE,\n        related_name='announces'\n    )\n    user = models.ForeignKey(",
        "detail": "apps.books.models",
        "documentation": {}
    },
    {
        "label": "Announces",
        "kind": 6,
        "importPath": "apps.books.models",
        "description": "apps.books.models",
        "peekOfCode": "class Announces(models.Model):\n    conservation_status = models.ForeignKey(\n        ConservationStatus,\n        on_delete=models.CASCADE,\n        related_name='announces'\n    )\n    user = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name='announces_created'",
        "detail": "apps.books.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.books.urls",
        "description": "apps.books.urls",
        "peekOfCode": "urlpatterns = [\n    # Exemplo de rota:\n    # path('', views.home, name='home'),\n]",
        "detail": "apps.books.urls",
        "documentation": {}
    },
    {
        "label": "ComplaintsConfig",
        "kind": 6,
        "importPath": "apps.complaints.apps",
        "description": "apps.complaints.apps",
        "peekOfCode": "class ComplaintsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.complaints'",
        "detail": "apps.complaints.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.complaints.urls",
        "description": "apps.complaints.urls",
        "peekOfCode": "urlpatterns = [\n    # Exemplo de rota:\n    # path('', views.home, name='home'),\n]",
        "detail": "apps.complaints.urls",
        "documentation": {}
    },
    {
        "label": "NotificationsConfig",
        "kind": 6,
        "importPath": "apps.notifications.apps",
        "description": "apps.notifications.apps",
        "peekOfCode": "class NotificationsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.notifications'",
        "detail": "apps.notifications.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.notifications.urls",
        "description": "apps.notifications.urls",
        "peekOfCode": "urlpatterns = [\n    # Exemplo de rota:\n    # path('', views.home, name='home'),\n]",
        "detail": "apps.notifications.urls",
        "documentation": {}
    },
    {
        "label": "TokencsrfConfig",
        "kind": 6,
        "importPath": "apps.tokenCSRF.apps",
        "description": "apps.tokenCSRF.apps",
        "peekOfCode": "class TokencsrfConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'tokenCSRF'",
        "detail": "apps.tokenCSRF.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.tokenCSRF.urls",
        "description": "apps.tokenCSRF.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.TokenCSRFView.as_view()),\n]",
        "detail": "apps.tokenCSRF.urls",
        "documentation": {}
    },
    {
        "label": "TokenCSRFView",
        "kind": 6,
        "importPath": "apps.tokenCSRF.views",
        "description": "apps.tokenCSRF.views",
        "peekOfCode": "class TokenCSRFView(APIView):\n    def get(self, request):\n        token = get_token(request)\n        return JsonResponse({\"status\": \"success\", \"message\": \"CSRF token retrieved successfully\", \"data\": token}, status=status.HTTP_200_OK)",
        "detail": "apps.tokenCSRF.views",
        "documentation": {}
    },
    {
        "label": "TransactionsConfig",
        "kind": 6,
        "importPath": "apps.transactions.apps",
        "description": "apps.transactions.apps",
        "peekOfCode": "class TransactionsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.transactions'",
        "detail": "apps.transactions.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.transactions.urls",
        "description": "apps.transactions.urls",
        "peekOfCode": "urlpatterns = [\n    # Exemplo de rota:\n    # path('', views.home, name='home'),\n]",
        "detail": "apps.transactions.urls",
        "documentation": {}
    },
    {
        "label": "UserService",
        "kind": 6,
        "importPath": "apps.users.service.UserService",
        "description": "apps.users.service.UserService",
        "peekOfCode": "class UserService:\n    def __init__(self):\n        self.user_model = User\n    def createUser(self, **data):\n        userExists = self.getUserByEmail(data.email)\n        if userExists:\n            return JsonResponse({\"status\": \"error\", \"message\": \"User already exists\"}, status=status.HTTP_409_CONFLICT)\n        return self.user_model.objects.create(**data)\n    def getUserByEmail(self, email):\n        return self.user_model.objects.filter(email=email).first()",
        "detail": "apps.users.service.UserService",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "apps.users.apps",
        "description": "apps.users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'apps.users'",
        "detail": "apps.users.apps",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "apps.users.models",
        "description": "apps.users.models",
        "peekOfCode": "class User(models.Model):\n    full_name = models.CharField(max_length=150)  \n    date_birth = models.DateField(null=True, blank=True)  \n    email = models.EmailField(unique=True)  \n    password = models.CharField(max_length=128)  \n    phone = models.CharField(max_length=20, null=True, blank=True)  \n    created_at = models.DateTimeField(auto_now_add=True)  \n    updated_at = models.DateTimeField(auto_now=True)  \n    def __str__(self):\n        return self.full_name",
        "detail": "apps.users.models",
        "documentation": {}
    },
    {
        "label": "Profile",
        "kind": 6,
        "importPath": "apps.users.models",
        "description": "apps.users.models",
        "peekOfCode": "class Profile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\"profile\")\n    nickname = models.CharField(max_length=100)\n    description = models.TextField(blank=True, null=True)\n    photo = models.BinaryField(blank=True, null=True)\n    def __str__(self):\n        return self.nickname",
        "detail": "apps.users.models",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "apps.users.serializers",
        "description": "apps.users.serializers",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = \"__all__\"",
        "detail": "apps.users.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "apps.users.urls",
        "description": "apps.users.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.UserViews.as_view()),\n]",
        "detail": "apps.users.urls",
        "documentation": {}
    },
    {
        "label": "UserViews",
        "kind": 6,
        "importPath": "apps.users.views",
        "description": "apps.users.views",
        "peekOfCode": "class UserViews(APIView):\n    def __init__(self):\n        self.user_service = UserService()\n    def post(self, request):\n        serializer = UserSerializer(data=request.data)\n        serializer.is_valid(raise_exception=True)\n        serializer.save()\n        return JsonResponse({\"status\": \"success\", \"message\": \"User created successfully\", \"data\": serializer.data}, status=status.HTTP_201_CREATED)",
        "detail": "apps.users.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.asgi",
        "description": "core.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "core.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = config(\"SECRET_KEY\", default=\"unsafe-secret-key\")\nDEBUG = config(\"DEBUG\", default=True, cast=bool)\nALLOWED_HOSTS = config(\"ALLOWED_HOSTS\", default=\"\").split(\",\")\nINSTALLED_APPS = [\n    # apps django padrão...\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "SECRET_KEY = config(\"SECRET_KEY\", default=\"unsafe-secret-key\")\nDEBUG = config(\"DEBUG\", default=True, cast=bool)\nALLOWED_HOSTS = config(\"ALLOWED_HOSTS\", default=\"\").split(\",\")\nINSTALLED_APPS = [\n    # apps django padrão...\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DEBUG = config(\"DEBUG\", default=True, cast=bool)\nALLOWED_HOSTS = config(\"ALLOWED_HOSTS\", default=\"\").split(\",\")\nINSTALLED_APPS = [\n    # apps django padrão...\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "ALLOWED_HOSTS = config(\"ALLOWED_HOSTS\", default=\"\").split(\",\")\nINSTALLED_APPS = [\n    # apps django padrão...\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # terceiros",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    # apps django padrão...\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # terceiros\n    'rest_framework',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "ROOT_URLCONF = 'core.urls'\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',          # importante que esta seja antes da AuthenticationMiddleware\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',       # obrigatório para admin e autenticação\n    'django.contrib.messages.middleware.MessageMiddleware',          # obrigatório para mensagens\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',          # importante que esta seja antes da AuthenticationMiddleware\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',       # obrigatório para admin e autenticação\n    'django.contrib.messages.middleware.MessageMiddleware',          # obrigatório para mensagens\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nCORS_ALLOWED_ORIGINS = config(",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = config(\n    \"CORS_ALLOWED_ORIGINS\",\n    default=\"http://localhost:3000\",\n    cast=Csv()\n)\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],  # pode adicionar templates personalizados aqui\n        'APP_DIRS': True,",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],  # pode adicionar templates personalizados aqui\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "WSGI_APPLICATION = 'core.wsgi.application'\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.AllowAny',  # ajuste conforme seu controle de acesso\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.AllowAny',  # ajuste conforme seu controle de acesso\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication',\n        # para JWT futuramente:",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / 'staticfiles'\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.AllowAny',  # ajuste conforme seu controle de acesso\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication',\n        # para JWT futuramente:\n        # 'rest_framework_simplejwt.authentication.JWTAuthentication',",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.AllowAny',  # ajuste conforme seu controle de acesso\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication',\n        # para JWT futuramente:\n        # 'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ],",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "core.settings",
        "description": "core.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': config(\"DB_ENGINE\"),\n        'NAME': config(\"DB_NAME\"),\n        'USER': config(\"DB_USER\"),\n        'PASSWORD': config(\"DB_PASSWORD\"),\n        'HOST': config(\"DB_HOST\"),\n        'PORT': config(\"DB_PORT\"),\n    }\n}",
        "detail": "core.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls",
        "description": "core.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('tokenCSRF/', include('apps.tokenCSRF.urls')),\n    path('users/', include('apps.users.urls')),\n    path('books/', include('apps.books.urls')),\n    path('transactions/', include('apps.transactions.urls')),\n    path('notifications/', include('apps.notifications.urls')),\n    path('complaints/', include('apps.complaints.urls')),\n]\nif settings.DEBUG:",
        "detail": "core.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "core.wsgi",
        "description": "core.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "core.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]